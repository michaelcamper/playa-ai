// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: riva_tts.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { AudioEncoding, audioEncodingFromJSON, audioEncodingToJSON } from "./riva_audio";

export const protobufPackage = "nvidia.riva.tts";

export interface SynthesizeSpeechRequest {
  text: string;
  languageCode: string;
  /** audio encoding params */
  encoding: AudioEncoding;
  sampleRateHz: number;
  /** voice params */
  voiceName: string;
}

export interface SynthesizeSpeechResponseMetadata {
  /**
   * Currently experimental API addition that returns the input text
   * after preprocessing has been completed as well as the predicted
   * duration for each token.
   * Note: this message is subject to future breaking changes, and potential
   * removal.
   */
  text: string;
  processedText: string;
  predictedDurations: number[];
}

export interface SynthesizeSpeechResponse {
  audio: Buffer;
  meta?: SynthesizeSpeechResponseMetadata | undefined;
}

function createBaseSynthesizeSpeechRequest(): SynthesizeSpeechRequest {
  return { text: "", languageCode: "", encoding: 0, sampleRateHz: 0, voiceName: "" };
}

export const SynthesizeSpeechRequest: MessageFns<SynthesizeSpeechRequest> = {
  encode(message: SynthesizeSpeechRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.encoding !== 0) {
      writer.uint32(24).int32(message.encoding);
    }
    if (message.sampleRateHz !== 0) {
      writer.uint32(32).int32(message.sampleRateHz);
    }
    if (message.voiceName !== "") {
      writer.uint32(42).string(message.voiceName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeSpeechRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeSpeechRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.encoding = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sampleRateHz = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.voiceName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeSpeechRequest {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      encoding: isSet(object.encoding) ? audioEncodingFromJSON(object.encoding) : 0,
      sampleRateHz: isSet(object.sampleRateHz) ? globalThis.Number(object.sampleRateHz) : 0,
      voiceName: isSet(object.voiceName) ? globalThis.String(object.voiceName) : "",
    };
  },

  toJSON(message: SynthesizeSpeechRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.encoding !== 0) {
      obj.encoding = audioEncodingToJSON(message.encoding);
    }
    if (message.sampleRateHz !== 0) {
      obj.sampleRateHz = Math.round(message.sampleRateHz);
    }
    if (message.voiceName !== "") {
      obj.voiceName = message.voiceName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynthesizeSpeechRequest>, I>>(base?: I): SynthesizeSpeechRequest {
    return SynthesizeSpeechRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynthesizeSpeechRequest>, I>>(object: I): SynthesizeSpeechRequest {
    const message = createBaseSynthesizeSpeechRequest();
    message.text = object.text ?? "";
    message.languageCode = object.languageCode ?? "";
    message.encoding = object.encoding ?? 0;
    message.sampleRateHz = object.sampleRateHz ?? 0;
    message.voiceName = object.voiceName ?? "";
    return message;
  },
};

function createBaseSynthesizeSpeechResponseMetadata(): SynthesizeSpeechResponseMetadata {
  return { text: "", processedText: "", predictedDurations: [] };
}

export const SynthesizeSpeechResponseMetadata: MessageFns<SynthesizeSpeechResponseMetadata> = {
  encode(message: SynthesizeSpeechResponseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.processedText !== "") {
      writer.uint32(18).string(message.processedText);
    }
    writer.uint32(66).fork();
    for (const v of message.predictedDurations) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeSpeechResponseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeSpeechResponseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.processedText = reader.string();
          continue;
        }
        case 8: {
          if (tag === 69) {
            message.predictedDurations.push(reader.float());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.predictedDurations.push(reader.float());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeSpeechResponseMetadata {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      processedText: isSet(object.processedText) ? globalThis.String(object.processedText) : "",
      predictedDurations: globalThis.Array.isArray(object?.predictedDurations)
        ? object.predictedDurations.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: SynthesizeSpeechResponseMetadata): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.processedText !== "") {
      obj.processedText = message.processedText;
    }
    if (message.predictedDurations?.length) {
      obj.predictedDurations = message.predictedDurations;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynthesizeSpeechResponseMetadata>, I>>(
    base?: I,
  ): SynthesizeSpeechResponseMetadata {
    return SynthesizeSpeechResponseMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynthesizeSpeechResponseMetadata>, I>>(
    object: I,
  ): SynthesizeSpeechResponseMetadata {
    const message = createBaseSynthesizeSpeechResponseMetadata();
    message.text = object.text ?? "";
    message.processedText = object.processedText ?? "";
    message.predictedDurations = object.predictedDurations?.map((e) => e) || [];
    return message;
  },
};

function createBaseSynthesizeSpeechResponse(): SynthesizeSpeechResponse {
  return { audio: Buffer.alloc(0), meta: undefined };
}

export const SynthesizeSpeechResponse: MessageFns<SynthesizeSpeechResponse> = {
  encode(message: SynthesizeSpeechResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audio.length !== 0) {
      writer.uint32(10).bytes(message.audio);
    }
    if (message.meta !== undefined) {
      SynthesizeSpeechResponseMetadata.encode(message.meta, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeSpeechResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeSpeechResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audio = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.meta = SynthesizeSpeechResponseMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeSpeechResponse {
    return {
      audio: isSet(object.audio) ? Buffer.from(bytesFromBase64(object.audio)) : Buffer.alloc(0),
      meta: isSet(object.meta) ? SynthesizeSpeechResponseMetadata.fromJSON(object.meta) : undefined,
    };
  },

  toJSON(message: SynthesizeSpeechResponse): unknown {
    const obj: any = {};
    if (message.audio.length !== 0) {
      obj.audio = base64FromBytes(message.audio);
    }
    if (message.meta !== undefined) {
      obj.meta = SynthesizeSpeechResponseMetadata.toJSON(message.meta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynthesizeSpeechResponse>, I>>(base?: I): SynthesizeSpeechResponse {
    return SynthesizeSpeechResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynthesizeSpeechResponse>, I>>(object: I): SynthesizeSpeechResponse {
    const message = createBaseSynthesizeSpeechResponse();
    message.audio = object.audio ?? Buffer.alloc(0);
    message.meta = (object.meta !== undefined && object.meta !== null)
      ? SynthesizeSpeechResponseMetadata.fromPartial(object.meta)
      : undefined;
    return message;
  },
};

export type RivaSpeechSynthesisService = typeof RivaSpeechSynthesisService;
export const RivaSpeechSynthesisService = {
  /**
   * Used to request text-to-speech from the service. Submit a request containing the
   * desired text and configuration, and receive audio bytes in the requested format.
   */
  synthesize: {
    path: "/nvidia.riva.tts.RivaSpeechSynthesis/Synthesize",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SynthesizeSpeechRequest): Buffer =>
      Buffer.from(SynthesizeSpeechRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SynthesizeSpeechRequest => SynthesizeSpeechRequest.decode(value),
    responseSerialize: (value: SynthesizeSpeechResponse): Buffer =>
      Buffer.from(SynthesizeSpeechResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SynthesizeSpeechResponse => SynthesizeSpeechResponse.decode(value),
  },
  /**
   * Used to request text-to-speech returned via stream as it becomes available.
   * Submit a SynthesizeSpeechRequest with desired text and configuration,
   * and receive stream of bytes in the requested format.
   */
  synthesizeOnline: {
    path: "/nvidia.riva.tts.RivaSpeechSynthesis/SynthesizeOnline",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SynthesizeSpeechRequest): Buffer =>
      Buffer.from(SynthesizeSpeechRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SynthesizeSpeechRequest => SynthesizeSpeechRequest.decode(value),
    responseSerialize: (value: SynthesizeSpeechResponse): Buffer =>
      Buffer.from(SynthesizeSpeechResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SynthesizeSpeechResponse => SynthesizeSpeechResponse.decode(value),
  },
} as const;

export interface RivaSpeechSynthesisServer extends UntypedServiceImplementation {
  /**
   * Used to request text-to-speech from the service. Submit a request containing the
   * desired text and configuration, and receive audio bytes in the requested format.
   */
  synthesize: handleUnaryCall<SynthesizeSpeechRequest, SynthesizeSpeechResponse>;
  /**
   * Used to request text-to-speech returned via stream as it becomes available.
   * Submit a SynthesizeSpeechRequest with desired text and configuration,
   * and receive stream of bytes in the requested format.
   */
  synthesizeOnline: handleServerStreamingCall<SynthesizeSpeechRequest, SynthesizeSpeechResponse>;
}

export interface RivaSpeechSynthesisClient extends Client {
  /**
   * Used to request text-to-speech from the service. Submit a request containing the
   * desired text and configuration, and receive audio bytes in the requested format.
   */
  synthesize(
    request: SynthesizeSpeechRequest,
    callback: (error: ServiceError | null, response: SynthesizeSpeechResponse) => void,
  ): ClientUnaryCall;
  synthesize(
    request: SynthesizeSpeechRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SynthesizeSpeechResponse) => void,
  ): ClientUnaryCall;
  synthesize(
    request: SynthesizeSpeechRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SynthesizeSpeechResponse) => void,
  ): ClientUnaryCall;
  /**
   * Used to request text-to-speech returned via stream as it becomes available.
   * Submit a SynthesizeSpeechRequest with desired text and configuration,
   * and receive stream of bytes in the requested format.
   */
  synthesizeOnline(
    request: SynthesizeSpeechRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SynthesizeSpeechResponse>;
  synthesizeOnline(
    request: SynthesizeSpeechRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SynthesizeSpeechResponse>;
}

export const RivaSpeechSynthesisClient = makeGenericClientConstructor(
  RivaSpeechSynthesisService,
  "nvidia.riva.tts.RivaSpeechSynthesis",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RivaSpeechSynthesisClient;
  service: typeof RivaSpeechSynthesisService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
