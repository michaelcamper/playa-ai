// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: riva_audio.proto

/* eslint-disable */

export const protobufPackage = "nvidia.riva";

/** AudioEncoding specifies the encoding of the audio bytes in the encapsulating message. */
export enum AudioEncoding {
  /** ENCODING_UNSPECIFIED - Not specified. */
  ENCODING_UNSPECIFIED = 0,
  /** LINEAR_PCM - Uncompressed 16-bit signed little-endian samples (Linear PCM). */
  LINEAR_PCM = 1,
  /**
   * FLAC - `FLAC` (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
   * encoding supports 16-bit and 24-bit samples, however, not all fields in
   * `STREAMINFO` are supported.
   */
  FLAC = 2,
  /** MULAW - 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law. */
  MULAW = 3,
  /** ALAW - 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law. */
  ALAW = 20,
  UNRECOGNIZED = -1,
}

export function audioEncodingFromJSON(object: any): AudioEncoding {
  switch (object) {
    case 0:
    case "ENCODING_UNSPECIFIED":
      return AudioEncoding.ENCODING_UNSPECIFIED;
    case 1:
    case "LINEAR_PCM":
      return AudioEncoding.LINEAR_PCM;
    case 2:
    case "FLAC":
      return AudioEncoding.FLAC;
    case 3:
    case "MULAW":
      return AudioEncoding.MULAW;
    case 20:
    case "ALAW":
      return AudioEncoding.ALAW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioEncoding.UNRECOGNIZED;
  }
}

export function audioEncodingToJSON(object: AudioEncoding): string {
  switch (object) {
    case AudioEncoding.ENCODING_UNSPECIFIED:
      return "ENCODING_UNSPECIFIED";
    case AudioEncoding.LINEAR_PCM:
      return "LINEAR_PCM";
    case AudioEncoding.FLAC:
      return "FLAC";
    case AudioEncoding.MULAW:
      return "MULAW";
    case AudioEncoding.ALAW:
      return "ALAW";
    case AudioEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
